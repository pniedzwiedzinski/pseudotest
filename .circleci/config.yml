version: 2

jobs:
  test_django:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
        environment:
          S3_BUCKET: none
          DB_NAME: pseudotest
          DB_USER: root
          DB_PASSWORD: testing
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
      - image: mariadb:10.1.34
        environment:
          MYSQL_ROOT_PASSWORD: testing
          MYSQL_DATABASE: pseudotest

    working_directory: ~/repo/test_django

    steps:
      - checkout:
          path: ~/repo

      # Download and cache dependencies
      - restore_cache:
          keys:
            - ${CACHE_VERSION}-django-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - ${CACHE_VERSION}-django-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: ${CACHE_VERSION}-django-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python manage.py test

  test_lambda:
    docker:
      - image: circleci/python:3.6.1

    working_directory: ~/repo/lambda

    steps:
      - checkout:
          path: ~/repo

      - restore_cache:
          keys:
            - ${CACHE_VERSION}-lambda-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - ${CACHE_VERSION}-lambda-dependencies-

      - run:
          name: Install python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          key: ${CACHE_VERSION}-lambda-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - ./node_modules
            - ./venv

  deploy_serverless:
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11

    working_directory: ~/repo/lambda

    steps:
      - checkout:
          path: ~/repo

      - setup_remote_docker: # (2)
          version: 17.03.0-ce
          docker_layer_caching: true # (3)

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      - run:
          name: Install npm serverless
          command: |
            npm install serverless -g
            npm ci

      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - run:
          name: Setup credentials
          command: |
            mkdir ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = $SLS_ACCESS" >> ~/.aws/credentials
            echo "aws_secret_access_key = $SLS_SECRET" >> ~/.aws/credentials

      - run:
          name: Deploy serverless
          command: sls deploy --stage prod

  deploy_django:
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
        environment:
          AWS_CODE_DEPLOY_REGION: eu-central-1
          AWS_CODE_DEPLOY_APPLICATION_NAME: PseudoTest
          AWS_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: PseudoTest-DepGrp
          AWS_CODE_DEPLOY_APP_SOURCE: "repo"
          AWS_CODE_DEPLOY_S3_BUCKET: pseudotest-ec2
          AWS_CODE_DEPLOY_S3_FILENAME: "${CIRCLE_BUILD_NUM}#${CIRCLE_SHA1:0:7}.zip"

    working_directory: ~

    steps:
      - checkout:
          path: ~/repo

      - run:
          name: Install sudo
          command: |
            apt-get update
            apt-get install -y sudo

      - run:
          name: Install code deploy
          command: npm install aws-code-deploy -g

      - run:
          name: Deploy
          command: aws-code-deploy

workflows:
  version: 2

  build_deploy:
    jobs:
      - test_django
      - test_lambda
      - deploy_django:
          requires:
            - test_django
            - test_lambda
          filters:
            branches:
              only: master
      - deploy_serverless:
          requires:
            - test_django
            - test_lambda
          filters:
            branches:
              only: master
